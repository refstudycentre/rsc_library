<?php


/**
 * Implements hook_install().
 */
function rsc_library_install() {
  
  module_load_include('inc','rsc_library','rsc_library.common');
  
  /*
   * Settings for content types
   */
  rsc_library_content_type_settings();

  /*
   * Set up the role and permissions for library staff
   */

  $role_name = 'rsc library staff';

  // Try to load the role to see if it exists
  $role = user_role_load_by_name($role_name);
  if (!$role) {
    // create it, since it does not exist
    $role = new stdClass();
    $role->name = $role_name;
    user_role_save($role);
    // load the newly created role, to get the rid
    $role = user_role_load_by_name($role_name);
  }

  // Make a list of permissions, keyed by module
  $permissions = array(
    'node' => array(
      'access content overview',
      'access content',
      'view own unpublished content',
      'view revisions',
      'revert revisions',
      'delete revisions',
    ),
    'system' => array(
      'view the administration theme',
    ),
  );
  foreach (rsc_library_content_types() as $type) {
    $permissions['node'][] = "create ${type} content";
    $permissions['node'][] = "edit own ${type} content";
    $permissions['node'][] = "edit any ${type} content";
    $permissions['node'][] = "delete own ${type} content";
    $permissions['node'][] = "delete any ${type} content";
  }

  // Assign the permissions to library staff
  _rsc_library_grant_permissions($role->rid, $permissions);
  
}


/**
 * Implements hook_uninstall().
 */
function rsc_library_uninstall() {
  // TODO: remove variables
}


/**
 * Taken from: http://drupal.stackexchange.com/a/126042/8452
 * Custom user_role_grant_permissions function
 * does the same thing as user_role_grant_permissions
 * but it can run at install time
 * @see user_role_grant_permissions
 * @param int $rid
 * @param array $permissions
 */
function _rsc_library_grant_permissions($rid, array $permissions = array()) {
  // this line doesn't work on install / enable hooks
  // $modules = user_permission_get_modules();
  // Grant new permissions for the role.
  foreach ($permissions as $module => $permission_list) {
    foreach ($permission_list as $name) {
      db_merge('role_permission')
        ->key(array(
          'rid' => $rid,
          'permission' => $name,
        ))
        ->fields(array(
          'module' => $module,
        ))
        ->execute();
    }
  }

  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}


/**
 * Implementations of https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_update_N/7.x
 *
 * Never renumber update functions.
 *
 * Optionally, update hooks may return a translated string that will be displayed to the user after the update has completed. If no message is returned, no message will be presented to the user.
 *
 * BUG ALERT: Apparently we shouldn't rely on module APIs to be available when running update scripts. Yet we need them (e.g. node_delete_multiple). How do we handle this?
 *
 */


/**
 * Delete all nodes of type "rsc_library_audio"
 */
function rsc_library_update_7200() {



  $bundle = "rsc_library_audio";

  // Get all relevant nids
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->addMetaData('account', user_load(1));
  $result = $query->execute();

  // delete the nodes
  $nids = array();
  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    node_delete_multiple($nids);
  }

  return t("Deleted @n nodes of type `@type`.", array(
    '@n'    => count($nids),
    '@type' => $bundle,
  ));

}


/**
 * Delete the "rsc_library_audio" content type
 */
function rsc_library_update_7201() {

  $bundle = "rsc_library_audio";

  // delete the content type
  node_type_delete($bundle);
  variable_del('node_preview_' . $bundle);

  // rebuild content types and menus
  node_types_rebuild();
  variable_set('menu_rebuild_needed', TRUE);

  return t("Deleted content type `@type`.", array(
    '@type' => $bundle,
  ));

}


/**
 * Delete the rscl_format field, since it did not contain useful info in the previous use case.
 * Update and/or create fields and instances based on the current settings.
 */
function rsc_library_update_7202() {

  module_load_include('inc','rsc_library','rsc_library.field');

  $field_name = 'rscl_format';

  field_delete_field($field_name);
  rsc_library_field__setup_fields();
  rsc_library_field__setup_field_instances();

  return t("Data in field `@field` has been discarded. Fields and instances for rsc_library have been created and/or updated.", array(
    '@field' => $field_name,
  ));

}


/**
 * Migrate content from the rscl_body field to rscl_summary.
 * This loads and saves every node of type rsc_library_article, which has the
 * side effect of updating the rscl_format field, too.
 */
function rsc_library_update_7203(&$sandbox) {

  $bundle = 'rsc_library_article';

  if (!isset($sandbox['progress'])) {

    // Get all relevant nids
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $bundle)
      ->addMetaData('account', user_load(1));
    $result = $query->execute();
    if (!empty($result['node'])) {
      $sandbox['nids'] = array_keys($result['node']);
      $sandbox['progress'] = 0;
      $sandbox['max'] = count($sandbox['nids']);
    } else {
      $sandbox['#finished'] = TRUE;
      return t("There were no nodes of type @type to process.", array(
        '@type' => $bundle,
      ));
    }

  }

  // load the node
  $nid = array_shift($sandbox['nids']);
  $node = node_load($nid);
  /** @var EntityDrupalWrapper $node_wrapper An EntityMetadataWrapper for the node */
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // check if the rscl_body field contains something
  $rscl_body_field_value = $node_wrapper->rscl_body->value();
  if (!empty($rscl_body_field_value)) {

    // move the field data
    try {

      $node_wrapper->rscl_summary->set($rscl_body_field_value);
      $node_wrapper->rscl_body->set(NULL);

    } catch (EntityMetadataWrapperException $e) { /* field is not set. ignore */ }

    // save the node
    $node_wrapper->save();

  }

  // advance the progress bar
  $sandbox['progress']++;
  $sandbox['#finished'] = empty($sandbox['nids']) ? TRUE : ($sandbox['progress'] / $sandbox['max']);

  return t("Processed @n nodes of type @type.", array(
    '@n'    => $sandbox['progress'],
    '@type' => $bundle,
  ));

}


/**
 * Check that the rscl_body field is empty, and delete it
 */
function rsc_library_update_7204() {

  $field_name = "rscl_body";
  $field = field_info_field($field_name);

  if (field_has_data($field)) {
    throw new DrupalUpdateException("There was still data left in field @field, so we didn't delete it. Please check and delete the field manually.", array(
      '@field' => $field_name,
    ));
  } else {
    field_delete_field($field_name);
    return t("Deleted field @field", array(
      '@field' => $field_name,
    ));
  }

}

