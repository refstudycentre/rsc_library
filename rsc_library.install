<?php


/**
 * Implements hook_install().
 */
function rsc_library_install() {
  
  module_load_include('inc','rsc_library','rsc_library.common');
  
  /*
   * Settings for content types
   */
  rsc_library_content_type_settings();

  /*
   * Set up the role and permissions for library staff
   */

  $role_name = 'rsc library staff';

  // Try to load the role to see if it exists
  $role = user_role_load_by_name($role_name);
  if (!$role) {
    // create it, since it does not exist
    $role = new stdClass();
    $role->name = $role_name;
    user_role_save($role);
    // load the newly created role, to get the rid
    $role = user_role_load_by_name($role_name);
  }

  // Make a list of permissions, keyed by module
  $permissions = array(
    'node' => array(
      'access content overview',
      'access content',
      'view own unpublished content',
      'view revisions',
      'revert revisions',
      'delete revisions',
    ),
    'system' => array(
      'view the administration theme',
    ),
  );
  foreach (rsc_library_content_types() as $type) {
    $permissions['node'][] = "create ${type} content";
    $permissions['node'][] = "edit own ${type} content";
    $permissions['node'][] = "edit any ${type} content";
    $permissions['node'][] = "delete own ${type} content";
    $permissions['node'][] = "delete any ${type} content";
  }

  dpm($permissions);

  // Assign the permissions to library staff
  _rsc_library_grant_permissions($role->rid, $permissions);
  
}


/**
 * Implements hook_uninstall().
 */
function rsc_library_uninstall() {
  // TODO: remove variables
}


/**
 * Taken from: http://drupal.stackexchange.com/a/126042/8452
 * Custom user_role_grant_permissions function
 * does the same thing as user_role_grant_permissions
 * but it can run at install time
 * @see user_role_grant_permissions
 * @param int $rid
 * @param array $permissions
 */
function _rsc_library_grant_permissions($rid, array $permissions = array()) {
  // this line doesn't work on install / enable hooks
  // $modules = user_permission_get_modules();
  // Grant new permissions for the role.
  foreach ($permissions as $module => $permission_list) {
    foreach ($permission_list as $name) {
      db_merge('role_permission')
        ->key(array(
          'rid' => $rid,
          'permission' => $name,
        ))
        ->fields(array(
          'module' => $module,
        ))
        ->execute();
    }
  }

  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}
