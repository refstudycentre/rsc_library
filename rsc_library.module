<?php

include "rsc_library.blocks.inc";


/**
 * Implements hook_permission().
 */
function rsc_library_permission() {
  return array(
    'administer rsc_library' => array(
      'title' => t('Administer RSC Libraries'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function rsc_library_menu() {
  $items = array();

  $items['admin/structure/rsc_library'] = array(
    'title' => t('RSC Libraries'),
    'description' => t('Configure libraries defined by the rsc_library module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rsc_library_settings'),
    'file' => 'rsc_library.admin.inc',
    'access arguments' => array('administer rsc_library'),
  );

  return $items;
}


/**
 * Implements hook_node_info().
 * 
 * Defines the content types used by rsc_library
 */
function rsc_library_node_info() {
  return array(
    'rsc_library_article' => array(
      'name'        => t('RSC Library: Article'),
      'base'        => 'rsc_library_article',
      'description' => t("Library article with author, attachment, etc."),
      'locked'      => TRUE,  // admin cannot change machine name
    ),
    'rsc_library_audio' => array(
      'name'        => t('RSC Library: Audio'),
      'base'        => 'rsc_library_audio',
      'description' => t("Audio with author, attachment, etc."),
      'locked'      => TRUE,  // admin cannot change machine name
    ),
    'rsc_library' => array(
      'name'        => t('RSC Library'),
      'base'        => 'rsc_library',
      'description' => t("Contains the settings and front page markup for a library."),
      'locked'      => TRUE,  // admin cannot change machine name
    ),
  );
}


/**
 * Implements hook_form().
 * 
 * These forms allow the content types to be edited
 */
function rsc_library_article_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}
function rsc_library_audio_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}
function rsc_library_form($node, &$form_state) {
  $form = node_content_form($node, $form_state);
  
  module_load_include('inc','rsc_library','rsc_library.admin');
  $form['rsc_library_node_settings'] = rsc_library_node_settings($node);
  if (!empty($form['rsc_library_node_settings']['#submit'])) {
    $form['#submit'][] = $form['rsc_library_node_settings']['#submit'];
  }
  
  return $form;
}


/**
 * Implements hook_node_delete().
 */
function rsc_library_node_delete($node) {
  if ('rsc_library' == $node->type) {    
    // clean up library variables
    variable_del("rsc_library_{$node->nid}");
    // TODO: how to find and delete the correct rscl_category_* variable? Search by value?
  }
}


/**
 * Implements hook_entity_view($entity, $type, $view_mode, $langcode).
 *
 * Calculate breadcrumbs for the current entity page
 */
function rsc_library_entity_view($entity, $type, $view_mode, $langcode) {
  if (('node' == $type) && ('rsc_library' == $entity->type) && ('full' == $view_mode)) {
    
    $GLOBALS['rsc_library']['lid'] = $entity->nid;
    
  } else if (('taxonomy_term' == $type) && ('full' == $view_mode) && (!empty($entity->field_library_id))) {

    $lid = field_get_items($type, $entity, 'field_library_id');
    $lid = array_shift($lid);
    $GLOBALS['rsc_library']['lid'] = $lid['value'];
    
  } else {
    $content_types = array(
      'rsc_library_article',
      'rsc_library_audio',
    );
    
    if ($view_mode == 'full' && empty($GLOBALS['rsc_library']['breadcrumb_set'])) {
      // this is a full page entity and the breadcrumbs have not yet been set
      $breadcrumbs = array();
      $lid = NULL;
    
      switch($type) {
        case 'node':
    
          if (in_array($entity->type, $content_types)) {
            $category_field_name = '';
    
            // determine the current library
            foreach($entity as $key => $val) {
              if (substr($key, 0, 14) === 'rscl_category_' && field_get_items('node',$entity,$key)) { // if the node is listed under a specific library's categories
                $lid = variable_get($key,NULL);
                if ($lid != NULL) {
                  $category_field_name = $key;
                  break;
                }
              }
            }
    
            if ($lid != NULL) { // if the library was determined
    
              // get the categories under which the node belongs
              $categories = field_get_items($type, $entity, $category_field_name, $langcode);
              if (!empty($categories)) {
    
                // If the node is in multiple categories, use only the first one for breadcrumbs
                $category = array_shift($categories);
                $category_tid = $category['tid'];
    
                // Get the parents of the current category and add them to the breadcrumbs
                $category_parents = taxonomy_get_parents_all($category_tid);
                foreach ($category_parents as $parent) {
                  $uri = taxonomy_term_uri($parent);
                  $breadcrumbs[] = l(rsc_library_shorten($parent->name), $uri['path'], array('attributes'=>array('title'=>$parent->name)));
                }
    
                // Add the library homepage to the head of the breadcrumb
                $breadcrumbs[] = l($entity->title,"node/{$entity->nid}");
                $breadcrumbs = array_reverse($breadcrumbs);
              }
            }
          }
    
          break;
        case 'taxonomy_term':
    
          // determine the current library
          $lid = variable_get("rscl_category_{$entity->vocabulary_machine_name}", NULL);
    
          if ($lid != NULL) {
    
            // get the parents of the current term and add them to the breadcrumbs
            $parents = taxonomy_get_parents_all($entity->tid); // this function includes the current term
            foreach ($parents as $parent) {
              $uri = taxonomy_term_uri($parent);
              $breadcrumbs[] = l(rsc_library_shorten($parent->name), $uri['path'], array('attributes'=>array('title'=>$parent->name)));
            }
            array_shift($breadcrumbs);
    
            // 5. Add the library homepage to the head of the breadcrumb
            $home_node = node_load($lid);
            if (!empty($home_node)) {
              $breadcrumbs[] = l($home_node->title,"node/{$lid}");
            } // else library was probably deleted, but categories remained
            $breadcrumbs = array_reverse($breadcrumbs);
          }
    
          break;
      }
    
      drupal_set_breadcrumb($breadcrumbs);
      $GLOBALS['rsc_library']['breadcrumb_set'] = TRUE;
      $GLOBALS['rsc_library']['lid'] = $lid; // set the current library for blocks and other modules to take note of
    
    }
  }

}


/**
 * Implements hook_entity_info_alter().
 */
function rsc_library_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['rscl_block'] = array(
    'label' => t('RSC Library block listing'),
    'custom settings' => TRUE,
  );
}


/**
 * Takes a string and shortens it by removing stopwords.
 */
function rsc_library_shorten($str) {
  static $stopwords = array('a', 'an', 'as', 'at', 'before', 'but', 'by', 'for', 'from', 'is', 'in', 'into', 'like', 'of', 'off', 'on', 'onto', 'per', 'since', 'than', 'the', 'this', 'that', 'to', 'up', 'via', 'with');
  $words = explode(' ', $str);
  $ef; // ellips flag

  foreach ($words as $key => $word) {
    if (in_array($word,$stopwords)) {
      if ($ef) {
        unset($words[$key]);
      } else {
        $words[$key] = 'â€¦';
        $ef = true;
      }
    } else {
      $ef = false;
    }
  }
  $str = implode(' ',$words);

  return $str;
}

