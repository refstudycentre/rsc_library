<?php

require_once "rsc_library.blocks.inc";
require_once "rsc_library.common.inc";
require_once "rsc_library.template.inc";


/**
 * Implements hook_permission().
 */
function rsc_library_permission() {

  $permissions = array(
    'administer rsc_library' => array(
      'title' => t('Administer RSC Libraries'),
    ),
  );

  // permissions like "create $type content" are created automatically
  return $permissions;

}


/**
 * Implements hook_menu().
 */
function rsc_library_menu() {
  $items = array();

  $items['admin/structure/rsc_library'] = array(
    'title'            => t('RSC Libraries'),
    'description'      => t('Configure libraries defined by the rsc_library module.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('rsc_library_settings'),
    'file'             => 'rsc_library.admin.inc',
    'access arguments' => array('administer rsc_library'),
  );

  $items['admin/structure/rsc_library/settings'] = array(
    'title'            => t('Settings'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -100,
  );

  $items['admin/structure/rsc_library/actions'] = array(
    'title'            => t('Actions'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('rsc_library_actions'),
    'file'             => 'rsc_library.admin.inc',
    'access arguments' => array('administer rsc_library'),
    'type'             => MENU_LOCAL_TASK
  );

  return $items;
}


/**
 * Implements hook_node_info().
 * 
 * Defines the content types used by rsc_library
 */
function rsc_library_node_info() {

  return rsc_library_content_types_info() + array(
    'rsc_library' => array(
      'name'        => t('RSC Library'),
      'base'        => 'rsc_library',
      'description' => t("Contains the settings and front page markup for a library."),
      'locked'      => TRUE,  // admin cannot change machine name
      'title_label' => t('Library name'),
    ),
  );

}


/**
 * Implements hook_form().
 * 
 * These forms allow the content types to be edited
 */
function rsc_library_article_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}
function rsc_library_link_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}
function rsc_library_request_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}
function rsc_library_book_preview_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}
function rsc_library_form($node, &$form_state) {
  $form = node_content_form($node, $form_state);
  
  module_load_include('inc','rsc_library','rsc_library.admin');
  $form['rsc_library_node_settings'] = rsc_library_node_settings($node);
  if (!empty($form['rsc_library_node_settings']['#submit'])) {
    $form['#submit'][] = $form['rsc_library_node_settings']['#submit'];
  }
  
  return $form;
}


/**
 * Implements hook_node_delete().
 */
function rsc_library_node_delete($node) {
  if ('rsc_library' == $node->type) {    
    // clean up library variables
    variable_del("rsc_library_{$node->nid}");
    // TODO: how to find and delete the correct RSC_LIBRARY_PREFIX_category_* variable? Search by value?
  }
}


/**
 * Implements hook_entity_view($entity, $type, $view_mode, $langcode).
 *
 * Calculate breadcrumbs for the current entity page
 * Set the Library ID global variable (influences block display, etc.)
 */
function rsc_library_entity_view($entity, $type, $view_mode, $langcode) {

  if (('node' == $type) && ('rsc_library' == $entity->type) && ('full' == $view_mode)) {

    // A library front page is being viewed. The node id is the library id.
    $GLOBALS['rsc_library']['lid'] = $entity->nid;
    
  } else if (('taxonomy_term' == $type) && ('full' == $view_mode) && (!empty($entity->field_library_id))) {

    // A taxonomy term is being viewed. Get the library id from a field attached to the vocabulary.
    $lid = field_get_items($type, $entity, 'field_library_id');
    $lid = array_shift($lid);
    $GLOBALS['rsc_library']['lid'] = $lid['value'];
    
  } else {

    if ($view_mode == 'full' && empty($GLOBALS['rsc_library']['breadcrumb_set'])) {

      // this is a full page entity and the breadcrumbs have not yet been set
      $breadcrumbs = array();
      $lid = NULL;
    
      switch($type) {
        case 'node':
    
          if (in_array($entity->type, rsc_library_content_types())) {
            $category_field_name = '';
    
            // determine the current library
            foreach($entity as $key => $val) {
              if (substr($key, 0, 14) === RSC_LIBRARY_PREFIX.'_category_' && field_get_items('node',$entity,$key)) { // if the node is listed under a specific library's categories
                $lid = variable_get($key,NULL);
                if ($lid != NULL) {
                  $category_field_name = $key;
                  break;
                }
              }
            }
    
            if ($lid != NULL) { // if the library was determined
    
              // get the categories under which the node belongs
              $categories = field_get_items($type, $entity, $category_field_name, $langcode);
              if (!empty($categories)) {
    
                // If the node is in multiple categories, use only the first one for breadcrumbs
                $category = array_shift($categories);
                $category_tid = $category['tid'];
    
                // Get the parents of the current category and add them to the breadcrumbs
                $category_parents = taxonomy_get_parents_all($category_tid);
                foreach ($category_parents as $parent) {
                  $uri = taxonomy_term_uri($parent);
                  $breadcrumbs[] = l(rsc_library_shorten($parent->name), $uri['path'], array('attributes'=>array('title'=>$parent->name)));
                }

                // Get the title of the library
                $library_title = db_query("select title from node where nid=:nid", array(
                  ':nid' => $lid,
                ))->fetchCol(0)[0];

                // Add the library homepage to the head of the breadcrumb
                $breadcrumbs[] = l($library_title, "node/{$lid}");

                $breadcrumbs = array_reverse($breadcrumbs);
              }
            }
          }
    
          break;
        case 'taxonomy_term':
    
          // determine the current library
          $lid = variable_get(RSC_LIBRARY_PREFIX."_category_{$entity->vocabulary_machine_name}", NULL);
    
          if ($lid != NULL) {
    
            // get the parents of the current term and add them to the breadcrumbs
            $parents = taxonomy_get_parents_all($entity->tid); // this function includes the current term
            foreach ($parents as $parent) {
              $uri = taxonomy_term_uri($parent);
              $breadcrumbs[] = l(rsc_library_shorten($parent->name), $uri['path'], array('attributes'=>array('title'=>$parent->name)));
            }
            array_shift($breadcrumbs);
    
            // 5. Add the library homepage to the head of the breadcrumb
            $home_node = node_load($lid);
            if (!empty($home_node)) {
              $breadcrumbs[] = l($home_node->title,"node/{$lid}");
            } // else library was probably deleted, but categories remained
            $breadcrumbs = array_reverse($breadcrumbs);
          }
    
          break;
      }
    
      drupal_set_breadcrumb($breadcrumbs);
      $GLOBALS['rsc_library']['breadcrumb_set'] = TRUE;
      $GLOBALS['rsc_library']['lid'] = $lid; // set the current library for blocks and other modules to take note of
    
    }
  }

}


/**
 * Implements hook_entity_info_alter().
 */
function rsc_library_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes'][RSC_LIBRARY_PREFIX.'_block'] = array(
    'label' => t('RSC Library block listing'),
    'custom settings' => TRUE,
  );
}


/**
 * Takes a string and shortens it by removing English stopwords.
 * TODO: make this configurable for multiple languages
 */
function rsc_library_shorten($str) {
  static $stopwords = array('a', 'an', 'as', 'at', 'before', 'but', 'by', 'for', 'from', 'is', 'in', 'into', 'like', 'of', 'off', 'on', 'onto', 'per', 'since', 'than', 'the', 'this', 'that', 'to', 'up', 'via', 'with');
  $words = explode(' ', $str);
  $ellipse_flag = FALSE;

  foreach ($words as $key => $word) {
    if (in_array($word, $stopwords)) {
      if ($ellipse_flag) {
        unset($words[$key]);
      } else {
        $words[$key] = 'â€¦';
        $ellipse_flag = TRUE;
      }
    } else {
      $ellipse_flag = FALSE;
    }
  }
  $str = implode(' ',$words);

  return $str;
}


/**
 * Implements hook_node_access($node, $op, $account)
 * https://api.drupal.org/api/drupal/modules%21node%21node.api.php/function/hook_node_access/7
 * Determine node access based on the library that it belongs to, if any.
 * Nodes belonging to a library inherit the library node's permissions.
 */
function rsc_library_node_access($node, $op, $account) {

  // TODO: find the library that this node belongs to, if any, else return IGNORE

  // TODO: check the node access of the library for the given operation and account and return that
  // (if there are multiple libraries, return the most permissive result)

}


/**
 * Implements hook_node_presave($node).
 * https://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_presave/7.x
 * Act on nodes before they are saved
 */
function rsc_library_node_presave($node) {

  // set the rscl_format field on library content automatically before saving
  if ($node->type == 'rsc_library_article') {
    rsc_library_set_format_field($node);
  }

}


/**
 * Calculate the value for the rscl_format field, based on the media used in other fields
 */
function rsc_library_set_format_field(&$node) {

  /** @var EntityDrupalWrapper $node_wrapper An EntityMetadataWrapper for the node */
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // check if the destination field exists
  if (!isset($node_wrapper->rscl_format)) {
    drupal_set_message(t("The rscl_format field has not been set up for node type `@type`.", array(
      '@type' => $node->type,
    )), 'warning', FALSE);
    return;
  }

  // compile a list of formats
  $formats = array();

  // check the type of each attached file
  foreach ($node_wrapper->rscl_attachment->getIterator() as $delta => $field_value_wrapper) {

    try {
      $fid_field_value = $field_value_wrapper->value();
    } catch (EntityMetadataWrapperException $e) {
      // this means the field probably had no data.
      // see https://www.drupal.org/node/1596594
      continue;
    }

    if (!isset($fid_field_value['fid'])) {
      // this means the field probably had a NULL entry
      continue;
    }

    $file = file_load($fid_field_value['fid']);
    $format = rsc_attachment_formatter_get_type($file->filemime);
    if (!in_array($format, $formats)) {
      $formats[] = $format;
    }
  }

  // check if the article has HTML full-text
  if (
    !in_array('text', $formats) &&                  // the node hasn't already been flagged as having text
    isset($node_wrapper->rscl_full_text) &&         // an instance of rscl_full_text field exists on this node type
    !empty($node_wrapper->rscl_full_text->value())  // there is some text in the field
  ) {
    $formats[] = 'text';
  }

  try {
    // set the rscl_format field
    $node_wrapper->rscl_format->set($formats);
  } catch (EntityMetadataWrapperException $e) {
    drupal_set_message(t("Failed to set the rscl_format field on node @nid.", array(
      '@nid' => $node->nid,
    )), 'error');
  }

}


/**
 * Implements hook_theme_registry_alter().
 * Taken from https://www.drupal.org/node/715160
 */
function rsc_library_theme_registry_alter(&$theme_registry) {

  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'rsc_library');

  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);

  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {

    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {

      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';

    }

  }

}


/**
 * Implements hook_mail().
 * https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_mail/7.x
 */
function rsc_library_mail($key, &$message, $params) {

  $langcode = $message['language']->language;

  switch ($key) {
    case 'new_request':

      $message['headers']['Return-Path'] = $params['user_email'];

      $message['subject'] = t('CL article request on @date', array(
        '@date' => $params['date'],
      ), array(
        'langcode' => $langcode,
      ));

      $body = <<<EOT

From: @email

Node ID: @nid

EOT;
      $message['body'][] = t($body, array(
        '@email' => $params['user_email'],
        '@nid' => $params['nid'],
      ), array(
        'langcode' => $langcode,
      ));

      dpm($message);
      break;

  }

}